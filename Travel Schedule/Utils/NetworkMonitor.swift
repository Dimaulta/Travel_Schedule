//
//  NetworkMonitor.swift
//  Travel Schedule
//
//  Created by –£–ª—å—Ç–∞ on 23.10.2025.
//

import Foundation
import Network
import SwiftUI

class NetworkMonitor: ObservableObject {
    private let monitor = NWPathMonitor()
    private let queue = DispatchQueue(label: "NetworkMonitor")
    private var probeWorkItem: DispatchWorkItem?
    
    @Published var isConnected = true
    
    init() {
        print("üîç NetworkMonitor: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
        monitor.pathUpdateHandler = { [weak self] path in
            print("üîç NetworkMonitor: pathUpdateHandler –≤—ã–∑–≤–∞–Ω")
            DispatchQueue.main.async {
                let wasConnected = self?.isConnected ?? true
                let isNowConnected = path.status == .satisfied
                
                print("üîç NetworkMonitor: –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è: \(wasConnected) -> \(isNowConnected)")
                print("üîç NetworkMonitor: path.status = \(path.status)")
                print("üîç NetworkMonitor: path.status == .satisfied = \(path.status == .satisfied)")
                
                // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
                if wasConnected != isNowConnected {
                    print("üîç NetworkMonitor: –†–ï–ê–õ–¨–ù–û–ï –∏–∑–º–µ–Ω–µ–Ω–∏–µ: \(wasConnected) -> \(isNowConnected)")
                }
                
                self?.isConnected = isNowConnected

                // –ï—Å–ª–∏ —Å–µ—Ç–∏ –Ω–µ—Ç ‚Äî –ø–ª–∞–Ω–∏—Ä—É–µ–º —Ä–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ HTTP probe,
                // —Ç.–∫. –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ö —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω—ã–π –ø—É—Ç—å –ø—Ä–∏—Ö–æ–¥–∏—Ç
                // —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π —É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ —Å–µ—Ç–∏
                if isNowConnected == false {
                    self?.scheduleProbe()
                } else {
                    // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π probe –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
                    self?.probeWorkItem?.cancel()
                    self?.probeWorkItem = nil
                }
            }
        }
        monitor.start(queue: queue)
        print("üîç NetworkMonitor: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
    }
    
    deinit {
        monitor.cancel()
    }

    // MARK: - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—É—Ç–∏ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ö
    private func scheduleProbe() {
        probeWorkItem?.cancel()
        let work = DispatchWorkItem { [weak self] in
            guard let self = self else { return }
            let url = URL(string: "https://clients3.google.com/generate_204")!
            let config = URLSessionConfiguration.ephemeral
            config.timeoutIntervalForRequest = 2
            config.timeoutIntervalForResource = 3
            let session = URLSession(configuration: config)
            let task = session.dataTask(with: url) { _, response, error in
                DispatchQueue.main.async {
                    if let http = response as? HTTPURLResponse, (200...299).contains(http.statusCode) {
                        let pathSatisfied = self.monitor.currentPath.status == .satisfied
                        print("üîç NetworkMonitor: PROBE —É—Å–ø–µ—Ö, pathSatisfied = \(pathSatisfied)")
                        // –°—Ä–∞–∑—É —Å—á–∏—Ç–∞–µ–º —Å–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–æ —É—Å–ø–µ—à–Ω–æ–º—É HTTP (–¥–ª—è UX),
                        // —á—Ç–æ–±—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ —Å–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω. –ü—É—Ç—å –¥–æ–≥–æ–Ω–∏—Ç —á—É—Ç—å –ø–æ–∑–∂–µ.
                        self.isConnected = true
                        self.probeWorkItem = nil
                    } else if let error = error {
                        print("üîç NetworkMonitor: PROBE –æ—à–∏–±–∫–∞: \(error.localizedDescription)")
                        // –ï—Å–ª–∏ –µ—â—ë –Ω–µ—Ç —Å–µ—Ç–∏ ‚Äî –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫.
                        if self.isConnected == false {
                            self.rescheduleProbe()
                        }
                    } else {
                        print("üîç NetworkMonitor: PROBE –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞")
                        if self.isConnected == false {
                            self.rescheduleProbe()
                        }
                    }
                }
            }
            task.resume()
        }
        probeWorkItem = work
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.0, execute: work)
    }

    private func rescheduleProbe() {
        // –ù–µ –º–Ω–æ–∂–∏–º –∑–∞–¥–∞—á–∏: –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π workItem ‚Äî –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ—â—ë –æ–¥–∏–Ω
        guard probeWorkItem == nil else { return }
        scheduleProbe()
    }
}
