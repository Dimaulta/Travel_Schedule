// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
internal protocol APIProtocol: Sendable {
    /// Список ближайших станций
    ///
    /// - Remark: HTTP `GET /v3.0/nearest_stations/`.
    /// - Remark: Generated from `#/paths//v3.0/nearest_stations//get(getNearestStations)`.
    func getNearestStations(_ input: Operations.getNearestStations.Input) async throws -> Operations.getNearestStations.Output
    /// Расписание рейсов между станциями
    ///
    /// - Remark: HTTP `GET /v3.0/search/`.
    /// - Remark: Generated from `#/paths//v3.0/search//get(getSchedualBetweenStations)`.
    func getSchedualBetweenStations(_ input: Operations.getSchedualBetweenStations.Input) async throws -> Operations.getSchedualBetweenStations.Output
    /// Список рейсов по станции
    ///
    /// - Remark: HTTP `GET /v3.0/schedule/`.
    /// - Remark: Generated from `#/paths//v3.0/schedule//get(getStationSchedule)`.
    func getStationSchedule(_ input: Operations.getStationSchedule.Input) async throws -> Operations.getStationSchedule.Output
    /// Список станций следования
    ///
    /// - Remark: HTTP `GET /v3.0/thread/`.
    /// - Remark: Generated from `#/paths//v3.0/thread//get(getRouteStations)`.
    func getRouteStations(_ input: Operations.getRouteStations.Input) async throws -> Operations.getRouteStations.Output
    /// Ближайший город
    ///
    /// - Remark: HTTP `GET /v3.0/nearest_settlement/`.
    /// - Remark: Generated from `#/paths//v3.0/nearest_settlement//get(getNearestCity)`.
    func getNearestCity(_ input: Operations.getNearestCity.Input) async throws -> Operations.getNearestCity.Output
    /// Информация о перевозчике
    ///
    /// - Remark: HTTP `GET /v3.0/carrier/`.
    /// - Remark: Generated from `#/paths//v3.0/carrier//get(getCarrierInfo)`.
    func getCarrierInfo(_ input: Operations.getCarrierInfo.Input) async throws -> Operations.getCarrierInfo.Output
    /// Список всех доступных станций
    ///
    /// - Remark: HTTP `GET /v3.0/stations_list/`.
    /// - Remark: Generated from `#/paths//v3.0/stations_list//get(getAllStations)`.
    func getAllStations(_ input: Operations.getAllStations.Input) async throws -> Operations.getAllStations.Output
    /// Информация об авторских правах
    ///
    /// - Remark: HTTP `GET /v3.0/copyright/`.
    /// - Remark: Generated from `#/paths//v3.0/copyright//get(getCopyright)`.
    func getCopyright(_ input: Operations.getCopyright.Input) async throws -> Operations.getCopyright.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Список ближайших станций
    ///
    /// - Remark: HTTP `GET /v3.0/nearest_stations/`.
    /// - Remark: Generated from `#/paths//v3.0/nearest_stations//get(getNearestStations)`.
    internal func getNearestStations(
        query: Operations.getNearestStations.Input.Query,
        headers: Operations.getNearestStations.Input.Headers = .init()
    ) async throws -> Operations.getNearestStations.Output {
        try await getNearestStations(Operations.getNearestStations.Input(
            query: query,
            headers: headers
        ))
    }
    /// Расписание рейсов между станциями
    ///
    /// - Remark: HTTP `GET /v3.0/search/`.
    /// - Remark: Generated from `#/paths//v3.0/search//get(getSchedualBetweenStations)`.
    internal func getSchedualBetweenStations(
        query: Operations.getSchedualBetweenStations.Input.Query,
        headers: Operations.getSchedualBetweenStations.Input.Headers = .init()
    ) async throws -> Operations.getSchedualBetweenStations.Output {
        try await getSchedualBetweenStations(Operations.getSchedualBetweenStations.Input(
            query: query,
            headers: headers
        ))
    }
    /// Список рейсов по станции
    ///
    /// - Remark: HTTP `GET /v3.0/schedule/`.
    /// - Remark: Generated from `#/paths//v3.0/schedule//get(getStationSchedule)`.
    internal func getStationSchedule(
        query: Operations.getStationSchedule.Input.Query,
        headers: Operations.getStationSchedule.Input.Headers = .init()
    ) async throws -> Operations.getStationSchedule.Output {
        try await getStationSchedule(Operations.getStationSchedule.Input(
            query: query,
            headers: headers
        ))
    }
    /// Список станций следования
    ///
    /// - Remark: HTTP `GET /v3.0/thread/`.
    /// - Remark: Generated from `#/paths//v3.0/thread//get(getRouteStations)`.
    internal func getRouteStations(
        query: Operations.getRouteStations.Input.Query,
        headers: Operations.getRouteStations.Input.Headers = .init()
    ) async throws -> Operations.getRouteStations.Output {
        try await getRouteStations(Operations.getRouteStations.Input(
            query: query,
            headers: headers
        ))
    }
    /// Ближайший город
    ///
    /// - Remark: HTTP `GET /v3.0/nearest_settlement/`.
    /// - Remark: Generated from `#/paths//v3.0/nearest_settlement//get(getNearestCity)`.
    internal func getNearestCity(
        query: Operations.getNearestCity.Input.Query,
        headers: Operations.getNearestCity.Input.Headers = .init()
    ) async throws -> Operations.getNearestCity.Output {
        try await getNearestCity(Operations.getNearestCity.Input(
            query: query,
            headers: headers
        ))
    }
    /// Информация о перевозчике
    ///
    /// - Remark: HTTP `GET /v3.0/carrier/`.
    /// - Remark: Generated from `#/paths//v3.0/carrier//get(getCarrierInfo)`.
    internal func getCarrierInfo(
        query: Operations.getCarrierInfo.Input.Query,
        headers: Operations.getCarrierInfo.Input.Headers = .init()
    ) async throws -> Operations.getCarrierInfo.Output {
        try await getCarrierInfo(Operations.getCarrierInfo.Input(
            query: query,
            headers: headers
        ))
    }
    /// Список всех доступных станций
    ///
    /// - Remark: HTTP `GET /v3.0/stations_list/`.
    /// - Remark: Generated from `#/paths//v3.0/stations_list//get(getAllStations)`.
    internal func getAllStations(
        query: Operations.getAllStations.Input.Query,
        headers: Operations.getAllStations.Input.Headers = .init()
    ) async throws -> Operations.getAllStations.Output {
        try await getAllStations(Operations.getAllStations.Input(
            query: query,
            headers: headers
        ))
    }
    /// Информация об авторских правах
    ///
    /// - Remark: HTTP `GET /v3.0/copyright/`.
    /// - Remark: Generated from `#/paths//v3.0/copyright//get(getCopyright)`.
    internal func getCopyright(
        query: Operations.getCopyright.Input.Query,
        headers: Operations.getCopyright.Input.Headers = .init()
    ) async throws -> Operations.getCopyright.Output {
        try await getCopyright(Operations.getCopyright.Input(
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
internal enum Servers {
    internal enum Server1 {
        internal static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://api.rasp.yandex.net",
                variables: []
            )
        }
    }
    @available(*, deprecated, renamed: "Servers.Server1.url")
    internal static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.rasp.yandex.net",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
internal enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    internal enum Schemas {
        /// - Remark: Generated from `#/components/schemas/Stations`.
        internal struct Stations: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Stations/pagination`.
            internal var pagination: Components.Schemas.Pagination?
            /// - Remark: Generated from `#/components/schemas/Stations/stations`.
            internal var stations: [Components.Schemas.Station]?
            /// Creates a new `Stations`.
            ///
            /// - Parameters:
            ///   - pagination:
            ///   - stations:
            internal init(
                pagination: Components.Schemas.Pagination? = nil,
                stations: [Components.Schemas.Station]? = nil
            ) {
                self.pagination = pagination
                self.stations = stations
            }
            internal enum CodingKeys: String, CodingKey {
                case pagination
                case stations
            }
        }
        /// - Remark: Generated from `#/components/schemas/Segments`.
        internal struct Segments: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Segments/pagination`.
            internal var pagination: Components.Schemas.Pagination?
            /// - Remark: Generated from `#/components/schemas/Segments/segments`.
            internal var segments: [Components.Schemas.Segment]?
            /// - Remark: Generated from `#/components/schemas/Segments/interval_segmentsPayload`.
            internal struct interval_segmentsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Segments/interval_segmentsPayload/from`.
                internal var from: Components.Schemas.Station?
                /// - Remark: Generated from `#/components/schemas/Segments/interval_segmentsPayload/to`.
                internal var to: Components.Schemas.Station?
                /// - Remark: Generated from `#/components/schemas/Segments/interval_segmentsPayload/thread`.
                internal var thread: Components.Schemas.Thread?
                /// - Remark: Generated from `#/components/schemas/Segments/interval_segmentsPayload/interval`.
                internal struct intervalPayload: Codable, Hashable, Sendable {
                    /// Периодичность рейсов, например, "автобус раз в 10-15 минут".
                    ///
                    /// - Remark: Generated from `#/components/schemas/Segments/interval_segmentsPayload/interval/density`.
                    internal var density: Swift.String?
                    /// Время начала движения по нитке.
                    ///
                    /// - Remark: Generated from `#/components/schemas/Segments/interval_segmentsPayload/interval/begin_time`.
                    internal var begin_time: Swift.String?
                    /// Время окончания движения по нитке.
                    ///
                    /// - Remark: Generated from `#/components/schemas/Segments/interval_segmentsPayload/interval/end_time`.
                    internal var end_time: Swift.String?
                    /// Creates a new `intervalPayload`.
                    ///
                    /// - Parameters:
                    ///   - density: Периодичность рейсов, например, "автобус раз в 10-15 минут".
                    ///   - begin_time: Время начала движения по нитке.
                    ///   - end_time: Время окончания движения по нитке.
                    internal init(
                        density: Swift.String? = nil,
                        begin_time: Swift.String? = nil,
                        end_time: Swift.String? = nil
                    ) {
                        self.density = density
                        self.begin_time = begin_time
                        self.end_time = end_time
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case density
                        case begin_time
                        case end_time
                    }
                }
                /// - Remark: Generated from `#/components/schemas/Segments/interval_segmentsPayload/interval`.
                internal var interval: Components.Schemas.Segments.interval_segmentsPayloadPayload.intervalPayload?
                /// Длительность рейса в секундах.
                ///
                /// - Remark: Generated from `#/components/schemas/Segments/interval_segmentsPayload/duration`.
                internal var duration: Swift.Int?
                /// Признак наличия пересадок по маршруту.
                ///
                /// - Remark: Generated from `#/components/schemas/Segments/interval_segmentsPayload/has_transfers`.
                internal var has_transfers: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/Segments/interval_segmentsPayload/tickets_info`.
                internal var tickets_info: Components.Schemas.TicketsInfo?
                /// Creates a new `interval_segmentsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - from:
                ///   - to:
                ///   - thread:
                ///   - interval:
                ///   - duration: Длительность рейса в секундах.
                ///   - has_transfers: Признак наличия пересадок по маршруту.
                ///   - tickets_info:
                internal init(
                    from: Components.Schemas.Station? = nil,
                    to: Components.Schemas.Station? = nil,
                    thread: Components.Schemas.Thread? = nil,
                    interval: Components.Schemas.Segments.interval_segmentsPayloadPayload.intervalPayload? = nil,
                    duration: Swift.Int? = nil,
                    has_transfers: Swift.Bool? = nil,
                    tickets_info: Components.Schemas.TicketsInfo? = nil
                ) {
                    self.from = from
                    self.to = to
                    self.thread = thread
                    self.interval = interval
                    self.duration = duration
                    self.has_transfers = has_transfers
                    self.tickets_info = tickets_info
                }
                internal enum CodingKeys: String, CodingKey {
                    case from
                    case to
                    case thread
                    case interval
                    case duration
                    case has_transfers
                    case tickets_info
                }
            }
            /// Список интервальных рейсов, движение по которым идет регулярно, но без определенного расписания.
            ///
            /// - Remark: Generated from `#/components/schemas/Segments/interval_segments`.
            internal typealias interval_segmentsPayload = [Components.Schemas.Segments.interval_segmentsPayloadPayload]
            /// Список интервальных рейсов, движение по которым идет регулярно, но без определенного расписания.
            ///
            /// - Remark: Generated from `#/components/schemas/Segments/interval_segments`.
            internal var interval_segments: Components.Schemas.Segments.interval_segmentsPayload?
            /// Creates a new `Segments`.
            ///
            /// - Parameters:
            ///   - pagination:
            ///   - segments:
            ///   - interval_segments: Список интервальных рейсов, движение по которым идет регулярно, но без определенного расписания.
            internal init(
                pagination: Components.Schemas.Pagination? = nil,
                segments: [Components.Schemas.Segment]? = nil,
                interval_segments: Components.Schemas.Segments.interval_segmentsPayload? = nil
            ) {
                self.pagination = pagination
                self.segments = segments
                self.interval_segments = interval_segments
            }
            internal enum CodingKeys: String, CodingKey {
                case pagination
                case segments
                case interval_segments
            }
        }
        /// - Remark: Generated from `#/components/schemas/Segment`.
        internal struct Segment: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Segment/from`.
            internal var from: Components.Schemas.Station?
            /// - Remark: Generated from `#/components/schemas/Segment/to`.
            internal var to: Components.Schemas.Station?
            /// Время отправления
            ///
            /// - Remark: Generated from `#/components/schemas/Segment/departure`.
            internal var departure: Swift.String?
            /// Время прибытия
            ///
            /// - Remark: Generated from `#/components/schemas/Segment/arrival`.
            internal var arrival: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Segment/thread`.
            internal var thread: Components.Schemas.Thread?
            /// - Remark: Generated from `#/components/schemas/Segment/tickets_info`.
            internal var tickets_info: Components.Schemas.TicketsInfo?
            /// Длительность рейса в секундах
            ///
            /// - Remark: Generated from `#/components/schemas/Segment/duration`.
            internal var duration: Swift.Int?
            /// Creates a new `Segment`.
            ///
            /// - Parameters:
            ///   - from:
            ///   - to:
            ///   - departure: Время отправления
            ///   - arrival: Время прибытия
            ///   - thread:
            ///   - tickets_info:
            ///   - duration: Длительность рейса в секундах
            internal init(
                from: Components.Schemas.Station? = nil,
                to: Components.Schemas.Station? = nil,
                departure: Swift.String? = nil,
                arrival: Swift.String? = nil,
                thread: Components.Schemas.Thread? = nil,
                tickets_info: Components.Schemas.TicketsInfo? = nil,
                duration: Swift.Int? = nil
            ) {
                self.from = from
                self.to = to
                self.departure = departure
                self.arrival = arrival
                self.thread = thread
                self.tickets_info = tickets_info
                self.duration = duration
            }
            internal enum CodingKeys: String, CodingKey {
                case from
                case to
                case departure
                case arrival
                case thread
                case tickets_info
                case duration
            }
        }
        /// - Remark: Generated from `#/components/schemas/Pagination`.
        internal struct Pagination: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Pagination/total`.
            internal var total: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Pagination/limit`.
            internal var limit: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Pagination/offset`.
            internal var offset: Swift.Int?
            /// Creates a new `Pagination`.
            ///
            /// - Parameters:
            ///   - total:
            ///   - limit:
            ///   - offset:
            internal init(
                total: Swift.Int? = nil,
                limit: Swift.Int? = nil,
                offset: Swift.Int? = nil
            ) {
                self.total = total
                self.limit = limit
                self.offset = offset
            }
            internal enum CodingKeys: String, CodingKey {
                case total
                case limit
                case offset
            }
        }
        /// - Remark: Generated from `#/components/schemas/Station`.
        internal struct Station: Codable, Hashable, Sendable {
            /// Тип пункта (например, станция, платформа)
            ///
            /// - Remark: Generated from `#/components/schemas/Station/type`.
            internal var _type: Swift.String?
            /// Полное название станции
            ///
            /// - Remark: Generated from `#/components/schemas/Station/title`.
            internal var title: Swift.String?
            /// Краткое название станции
            ///
            /// - Remark: Generated from `#/components/schemas/Station/short_title`.
            internal var short_title: Swift.String?
            /// Общепринятое название станции
            ///
            /// - Remark: Generated from `#/components/schemas/Station/popular_title`.
            internal var popular_title: Swift.String?
            /// Код станции в системе Яндекс Расписаний
            ///
            /// - Remark: Generated from `#/components/schemas/Station/code`.
            internal var code: Swift.String?
            /// Широта станции
            ///
            /// - Remark: Generated from `#/components/schemas/Station/lat`.
            internal var lat: Swift.Double?
            /// Долгота станции
            ///
            /// - Remark: Generated from `#/components/schemas/Station/lng`.
            internal var lng: Swift.Double?
            /// Тип станции
            ///
            /// - Remark: Generated from `#/components/schemas/Station/station_type`.
            internal var station_type: Swift.String?
            /// Название типа станции
            ///
            /// - Remark: Generated from `#/components/schemas/Station/station_type_name`.
            internal var station_type_name: Swift.String?
            /// Тип транспорта, обслуживающего станцию (Самолет, Поезд, Автобус и т.д.)
            ///
            /// - Remark: Generated from `#/components/schemas/Station/transport_type`.
            internal var transport_type: Swift.String?
            /// Расстояние до станции (если применимо)
            ///
            /// - Remark: Generated from `#/components/schemas/Station/distance`.
            internal var distance: Swift.Double?
            /// Уровень важности станции (если применимо)
            ///
            /// - Remark: Generated from `#/components/schemas/Station/majority`.
            internal var majority: Swift.Int?
            /// Направление движения (если применимо)
            ///
            /// - Remark: Generated from `#/components/schemas/Station/direction`.
            internal var direction: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Station/codes`.
            internal struct codesPayload: Codable, Hashable, Sendable {
                /// Код станции в системе Яндекс Расписаний
                ///
                /// - Remark: Generated from `#/components/schemas/Station/codes/yandex_code`.
                internal var yandex_code: Swift.String?
                /// Код железнодорожной станции в системе ЕСР (если применимо)
                ///
                /// - Remark: Generated from `#/components/schemas/Station/codes/esr_code`.
                internal var esr_code: Swift.String?
                /// Creates a new `codesPayload`.
                ///
                /// - Parameters:
                ///   - yandex_code: Код станции в системе Яндекс Расписаний
                ///   - esr_code: Код железнодорожной станции в системе ЕСР (если применимо)
                internal init(
                    yandex_code: Swift.String? = nil,
                    esr_code: Swift.String? = nil
                ) {
                    self.yandex_code = yandex_code
                    self.esr_code = esr_code
                }
                internal enum CodingKeys: String, CodingKey {
                    case yandex_code
                    case esr_code
                }
            }
            /// - Remark: Generated from `#/components/schemas/Station/codes`.
            internal var codes: Components.Schemas.Station.codesPayload?
            /// - Remark: Generated from `#/components/schemas/Station/type_choices`.
            internal var type_choices: Components.Schemas.Schedule?
            /// Creates a new `Station`.
            ///
            /// - Parameters:
            ///   - _type: Тип пункта (например, станция, платформа)
            ///   - title: Полное название станции
            ///   - short_title: Краткое название станции
            ///   - popular_title: Общепринятое название станции
            ///   - code: Код станции в системе Яндекс Расписаний
            ///   - lat: Широта станции
            ///   - lng: Долгота станции
            ///   - station_type: Тип станции
            ///   - station_type_name: Название типа станции
            ///   - transport_type: Тип транспорта, обслуживающего станцию (Самолет, Поезд, Автобус и т.д.)
            ///   - distance: Расстояние до станции (если применимо)
            ///   - majority: Уровень важности станции (если применимо)
            ///   - direction: Направление движения (если применимо)
            ///   - codes:
            ///   - type_choices:
            internal init(
                _type: Swift.String? = nil,
                title: Swift.String? = nil,
                short_title: Swift.String? = nil,
                popular_title: Swift.String? = nil,
                code: Swift.String? = nil,
                lat: Swift.Double? = nil,
                lng: Swift.Double? = nil,
                station_type: Swift.String? = nil,
                station_type_name: Swift.String? = nil,
                transport_type: Swift.String? = nil,
                distance: Swift.Double? = nil,
                majority: Swift.Int? = nil,
                direction: Swift.String? = nil,
                codes: Components.Schemas.Station.codesPayload? = nil,
                type_choices: Components.Schemas.Schedule? = nil
            ) {
                self._type = _type
                self.title = title
                self.short_title = short_title
                self.popular_title = popular_title
                self.code = code
                self.lat = lat
                self.lng = lng
                self.station_type = station_type
                self.station_type_name = station_type_name
                self.transport_type = transport_type
                self.distance = distance
                self.majority = majority
                self.direction = direction
                self.codes = codes
                self.type_choices = type_choices
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case title
                case short_title
                case popular_title
                case code
                case lat
                case lng
                case station_type
                case station_type_name
                case transport_type
                case distance
                case majority
                case direction
                case codes
                case type_choices
            }
        }
        /// - Remark: Generated from `#/components/schemas/Schedule1`.
        internal struct Schedule1: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Schedule1/desktop_url`.
            internal var desktop_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Schedule1/touch_url`.
            internal var touch_url: Swift.String?
            /// Creates a new `Schedule1`.
            ///
            /// - Parameters:
            ///   - desktop_url:
            ///   - touch_url:
            internal init(
                desktop_url: Swift.String? = nil,
                touch_url: Swift.String? = nil
            ) {
                self.desktop_url = desktop_url
                self.touch_url = touch_url
            }
            internal enum CodingKeys: String, CodingKey {
                case desktop_url
                case touch_url
            }
        }
        /// - Remark: Generated from `#/components/schemas/Schedule`.
        internal struct Schedule: Codable, Hashable, Sendable {
            /// Дни, когда рейс не выполняется
            ///
            /// - Remark: Generated from `#/components/schemas/Schedule/except_days`.
            internal var except_days: Swift.String?
            /// Время прибытия в формате ISO 8601
            ///
            /// - Remark: Generated from `#/components/schemas/Schedule/arrival`.
            internal var arrival: Swift.String?
            /// Время отправления в формате ISO 8601
            ///
            /// - Remark: Generated from `#/components/schemas/Schedule/departure`.
            internal var departure: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Schedule/thread`.
            internal var thread: Components.Schemas.Thread?
            /// Дни курсирования рейса
            ///
            /// - Remark: Generated from `#/components/schemas/Schedule/days`.
            internal var days: Swift.String?
            /// Остановки на маршруте
            ///
            /// - Remark: Generated from `#/components/schemas/Schedule/stops`.
            internal var stops: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Schedule/terminal`.
            internal var terminal: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Schedule/platform`.
            internal var platform: Swift.String?
            /// Creates a new `Schedule`.
            ///
            /// - Parameters:
            ///   - except_days: Дни, когда рейс не выполняется
            ///   - arrival: Время прибытия в формате ISO 8601
            ///   - departure: Время отправления в формате ISO 8601
            ///   - thread:
            ///   - days: Дни курсирования рейса
            ///   - stops: Остановки на маршруте
            ///   - terminal:
            ///   - platform:
            internal init(
                except_days: Swift.String? = nil,
                arrival: Swift.String? = nil,
                departure: Swift.String? = nil,
                thread: Components.Schemas.Thread? = nil,
                days: Swift.String? = nil,
                stops: Swift.String? = nil,
                terminal: Swift.String? = nil,
                platform: Swift.String? = nil
            ) {
                self.except_days = except_days
                self.arrival = arrival
                self.departure = departure
                self.thread = thread
                self.days = days
                self.stops = stops
                self.terminal = terminal
                self.platform = platform
            }
            internal enum CodingKeys: String, CodingKey {
                case except_days
                case arrival
                case departure
                case thread
                case days
                case stops
                case terminal
                case platform
            }
        }
        /// - Remark: Generated from `#/components/schemas/Thread`.
        internal struct Thread: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Thread/uid`.
            internal var uid: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Thread/title`.
            internal var title: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Thread/number`.
            internal var number: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Thread/carrier`.
            internal var carrier: Components.Schemas.Carrier?
            /// - Remark: Generated from `#/components/schemas/Thread/transport_type`.
            internal var transport_type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Thread/vehicle`.
            internal var vehicle: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Thread/start_time`.
            internal var start_time: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Thread/days`.
            internal var days: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Thread/interval`.
            internal var interval: Components.Schemas.Interval?
            /// Creates a new `Thread`.
            ///
            /// - Parameters:
            ///   - uid:
            ///   - title:
            ///   - number:
            ///   - carrier:
            ///   - transport_type:
            ///   - vehicle:
            ///   - start_time:
            ///   - days:
            ///   - interval:
            internal init(
                uid: Swift.String? = nil,
                title: Swift.String? = nil,
                number: Swift.String? = nil,
                carrier: Components.Schemas.Carrier? = nil,
                transport_type: Swift.String? = nil,
                vehicle: Swift.String? = nil,
                start_time: Swift.String? = nil,
                days: Swift.String? = nil,
                interval: Components.Schemas.Interval? = nil
            ) {
                self.uid = uid
                self.title = title
                self.number = number
                self.carrier = carrier
                self.transport_type = transport_type
                self.vehicle = vehicle
                self.start_time = start_time
                self.days = days
                self.interval = interval
            }
            internal enum CodingKeys: String, CodingKey {
                case uid
                case title
                case number
                case carrier
                case transport_type
                case vehicle
                case start_time
                case days
                case interval
            }
        }
        /// - Remark: Generated from `#/components/schemas/Carrier`.
        internal struct Carrier: Codable, Hashable, Sendable {
            /// Код перевозчика в системе Яндекс Расписаний
            ///
            /// - Remark: Generated from `#/components/schemas/Carrier/code`.
            internal var code: Swift.Int?
            /// Контактная информация
            ///
            /// - Remark: Generated from `#/components/schemas/Carrier/contacts`.
            internal var contacts: Swift.String?
            /// Ссылка на сайт перевозчика
            ///
            /// - Remark: Generated from `#/components/schemas/Carrier/url`.
            internal var url: Swift.String?
            /// Название перевозчика
            ///
            /// - Remark: Generated from `#/components/schemas/Carrier/title`.
            internal var title: Swift.String?
            /// Контактный телефон перевозчика
            ///
            /// - Remark: Generated from `#/components/schemas/Carrier/phone`.
            internal var phone: Swift.String?
            /// Адрес перевозчика
            ///
            /// - Remark: Generated from `#/components/schemas/Carrier/address`.
            internal var address: Swift.String?
            /// Ссылка на логотип перевозчика
            ///
            /// - Remark: Generated from `#/components/schemas/Carrier/logo`.
            internal var logo: Swift.String?
            /// Электронная почта перевозчика
            ///
            /// - Remark: Generated from `#/components/schemas/Carrier/email`.
            internal var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Carrier/codes`.
            internal struct codesPayload: Codable, Hashable, Sendable {
                /// Код перевозчика в системе ICAO
                ///
                /// - Remark: Generated from `#/components/schemas/Carrier/codes/icao`.
                internal var icao: Swift.String?
                /// Код перевозчика в системе Sirena
                ///
                /// - Remark: Generated from `#/components/schemas/Carrier/codes/sirena`.
                internal var sirena: Swift.String?
                /// Код перевозчика в системе IATA
                ///
                /// - Remark: Generated from `#/components/schemas/Carrier/codes/iata`.
                internal var iata: Swift.String?
                /// Creates a new `codesPayload`.
                ///
                /// - Parameters:
                ///   - icao: Код перевозчика в системе ICAO
                ///   - sirena: Код перевозчика в системе Sirena
                ///   - iata: Код перевозчика в системе IATA
                internal init(
                    icao: Swift.String? = nil,
                    sirena: Swift.String? = nil,
                    iata: Swift.String? = nil
                ) {
                    self.icao = icao
                    self.sirena = sirena
                    self.iata = iata
                }
                internal enum CodingKeys: String, CodingKey {
                    case icao
                    case sirena
                    case iata
                }
            }
            /// - Remark: Generated from `#/components/schemas/Carrier/codes`.
            internal var codes: Components.Schemas.Carrier.codesPayload?
            /// Creates a new `Carrier`.
            ///
            /// - Parameters:
            ///   - code: Код перевозчика в системе Яндекс Расписаний
            ///   - contacts: Контактная информация
            ///   - url: Ссылка на сайт перевозчика
            ///   - title: Название перевозчика
            ///   - phone: Контактный телефон перевозчика
            ///   - address: Адрес перевозчика
            ///   - logo: Ссылка на логотип перевозчика
            ///   - email: Электронная почта перевозчика
            ///   - codes:
            internal init(
                code: Swift.Int? = nil,
                contacts: Swift.String? = nil,
                url: Swift.String? = nil,
                title: Swift.String? = nil,
                phone: Swift.String? = nil,
                address: Swift.String? = nil,
                logo: Swift.String? = nil,
                email: Swift.String? = nil,
                codes: Components.Schemas.Carrier.codesPayload? = nil
            ) {
                self.code = code
                self.contacts = contacts
                self.url = url
                self.title = title
                self.phone = phone
                self.address = address
                self.logo = logo
                self.email = email
                self.codes = codes
            }
            internal enum CodingKeys: String, CodingKey {
                case code
                case contacts
                case url
                case title
                case phone
                case address
                case logo
                case email
                case codes
            }
        }
        /// - Remark: Generated from `#/components/schemas/TicketsInfo`.
        internal struct TicketsInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TicketsInfo/et_marker`.
            internal var et_marker: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TicketsInfo/places`.
            internal var places: [Components.Schemas.Place]?
            /// Creates a new `TicketsInfo`.
            ///
            /// - Parameters:
            ///   - et_marker:
            ///   - places:
            internal init(
                et_marker: Swift.Bool? = nil,
                places: [Components.Schemas.Place]? = nil
            ) {
                self.et_marker = et_marker
                self.places = places
            }
            internal enum CodingKeys: String, CodingKey {
                case et_marker
                case places
            }
        }
        /// - Remark: Generated from `#/components/schemas/Stop`.
        internal struct Stop: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Stop/arrival`.
            internal var arrival: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Stop/departure`.
            internal var departure: Swift.String?
            /// Продолжительность остановки в секундах
            ///
            /// - Remark: Generated from `#/components/schemas/Stop/stop_time`.
            internal var stop_time: Swift.Int?
            /// Время в пути до остановки
            ///
            /// - Remark: Generated from `#/components/schemas/Stop/duration`.
            internal var duration: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Stop/terminal`.
            internal var terminal: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Stop/platform`.
            internal var platform: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Stop/station`.
            internal var station: Components.Schemas.Station?
            /// Creates a new `Stop`.
            ///
            /// - Parameters:
            ///   - arrival:
            ///   - departure:
            ///   - stop_time: Продолжительность остановки в секундах
            ///   - duration: Время в пути до остановки
            ///   - terminal:
            ///   - platform:
            ///   - station:
            internal init(
                arrival: Swift.String? = nil,
                departure: Swift.String? = nil,
                stop_time: Swift.Int? = nil,
                duration: Swift.Int? = nil,
                terminal: Swift.String? = nil,
                platform: Swift.String? = nil,
                station: Components.Schemas.Station? = nil
            ) {
                self.arrival = arrival
                self.departure = departure
                self.stop_time = stop_time
                self.duration = duration
                self.terminal = terminal
                self.platform = platform
                self.station = station
            }
            internal enum CodingKeys: String, CodingKey {
                case arrival
                case departure
                case stop_time
                case duration
                case terminal
                case platform
                case station
            }
        }
        /// - Remark: Generated from `#/components/schemas/Place`.
        internal struct Place: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Place/name`.
            internal var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Place/price`.
            internal var price: Components.Schemas.Price?
            /// Creates a new `Place`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - price:
            internal init(
                name: Swift.String? = nil,
                price: Components.Schemas.Price? = nil
            ) {
                self.name = name
                self.price = price
            }
            internal enum CodingKeys: String, CodingKey {
                case name
                case price
            }
        }
        /// - Remark: Generated from `#/components/schemas/Price`.
        internal struct Price: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Price/currency`.
            internal var currency: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Price/whole`.
            internal var whole: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Price/cents`.
            internal var cents: Swift.Int?
            /// Creates a new `Price`.
            ///
            /// - Parameters:
            ///   - currency:
            ///   - whole:
            ///   - cents:
            internal init(
                currency: Swift.String? = nil,
                whole: Swift.Int? = nil,
                cents: Swift.Int? = nil
            ) {
                self.currency = currency
                self.whole = whole
                self.cents = cents
            }
            internal enum CodingKeys: String, CodingKey {
                case currency
                case whole
                case cents
            }
        }
        /// - Remark: Generated from `#/components/schemas/IntervalSchedule`.
        internal struct IntervalSchedule: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/IntervalSchedule/except_days`.
            internal var except_days: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IntervalSchedule/thread`.
            internal var thread: Components.Schemas.Thread?
            /// - Remark: Generated from `#/components/schemas/IntervalSchedule/interval`.
            internal struct intervalPayload: Codable, Hashable, Sendable {
                /// Частота рейсов
                ///
                /// - Remark: Generated from `#/components/schemas/IntervalSchedule/interval/density`.
                internal var density: Swift.String?
                /// Время начала
                ///
                /// - Remark: Generated from `#/components/schemas/IntervalSchedule/interval/begin_time`.
                internal var begin_time: Swift.String?
                /// Время окончания
                ///
                /// - Remark: Generated from `#/components/schemas/IntervalSchedule/interval/end_time`.
                internal var end_time: Swift.String?
                /// Creates a new `intervalPayload`.
                ///
                /// - Parameters:
                ///   - density: Частота рейсов
                ///   - begin_time: Время начала
                ///   - end_time: Время окончания
                internal init(
                    density: Swift.String? = nil,
                    begin_time: Swift.String? = nil,
                    end_time: Swift.String? = nil
                ) {
                    self.density = density
                    self.begin_time = begin_time
                    self.end_time = end_time
                }
                internal enum CodingKeys: String, CodingKey {
                    case density
                    case begin_time
                    case end_time
                }
            }
            /// - Remark: Generated from `#/components/schemas/IntervalSchedule/interval`.
            internal var interval: Components.Schemas.IntervalSchedule.intervalPayload?
            /// Creates a new `IntervalSchedule`.
            ///
            /// - Parameters:
            ///   - except_days:
            ///   - thread:
            ///   - interval:
            internal init(
                except_days: Swift.String? = nil,
                thread: Components.Schemas.Thread? = nil,
                interval: Components.Schemas.IntervalSchedule.intervalPayload? = nil
            ) {
                self.except_days = except_days
                self.thread = thread
                self.interval = interval
            }
            internal enum CodingKeys: String, CodingKey {
                case except_days
                case thread
                case interval
            }
        }
        /// - Remark: Generated from `#/components/schemas/Directions`.
        internal struct Directions: Codable, Hashable, Sendable {
            /// Код направления
            ///
            /// - Remark: Generated from `#/components/schemas/Directions/code`.
            internal var code: Swift.String?
            /// Название направления
            ///
            /// - Remark: Generated from `#/components/schemas/Directions/title`.
            internal var title: Swift.String?
            /// Creates a new `Directions`.
            ///
            /// - Parameters:
            ///   - code: Код направления
            ///   - title: Название направления
            internal init(
                code: Swift.String? = nil,
                title: Swift.String? = nil
            ) {
                self.code = code
                self.title = title
            }
            internal enum CodingKeys: String, CodingKey {
                case code
                case title
            }
        }
        /// - Remark: Generated from `#/components/schemas/ScheduleResponse`.
        internal struct ScheduleResponse: Codable, Hashable, Sendable {
            /// Дата расписания
            ///
            /// - Remark: Generated from `#/components/schemas/ScheduleResponse/date`.
            internal var date: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ScheduleResponse/pagination`.
            internal var pagination: Components.Schemas.Pagination?
            /// - Remark: Generated from `#/components/schemas/ScheduleResponse/station`.
            internal var station: Components.Schemas.Station?
            /// - Remark: Generated from `#/components/schemas/ScheduleResponse/schedule`.
            internal var schedule: [Components.Schemas.Schedule]?
            /// - Remark: Generated from `#/components/schemas/ScheduleResponse/interval_schedule`.
            internal var interval_schedule: [Components.Schemas.IntervalSchedule]?
            /// - Remark: Generated from `#/components/schemas/ScheduleResponse/directions`.
            internal var directions: [Components.Schemas.Directions]?
            /// - Remark: Generated from `#/components/schemas/ScheduleResponse/schedule_direction`.
            internal var schedule_direction: Components.Schemas.Directions?
            /// Creates a new `ScheduleResponse`.
            ///
            /// - Parameters:
            ///   - date: Дата расписания
            ///   - pagination:
            ///   - station:
            ///   - schedule:
            ///   - interval_schedule:
            ///   - directions:
            ///   - schedule_direction:
            internal init(
                date: Swift.String? = nil,
                pagination: Components.Schemas.Pagination? = nil,
                station: Components.Schemas.Station? = nil,
                schedule: [Components.Schemas.Schedule]? = nil,
                interval_schedule: [Components.Schemas.IntervalSchedule]? = nil,
                directions: [Components.Schemas.Directions]? = nil,
                schedule_direction: Components.Schemas.Directions? = nil
            ) {
                self.date = date
                self.pagination = pagination
                self.station = station
                self.schedule = schedule
                self.interval_schedule = interval_schedule
                self.directions = directions
                self.schedule_direction = schedule_direction
            }
            internal enum CodingKeys: String, CodingKey {
                case date
                case pagination
                case station
                case schedule
                case interval_schedule
                case directions
                case schedule_direction
            }
        }
        /// - Remark: Generated from `#/components/schemas/Interval`.
        internal struct Interval: Codable, Hashable, Sendable {
            /// Периодичность рейсов
            ///
            /// - Remark: Generated from `#/components/schemas/Interval/density`.
            internal var density: Swift.String?
            /// Время начала рейсов
            ///
            /// - Remark: Generated from `#/components/schemas/Interval/begin_time`.
            internal var begin_time: Swift.String?
            /// Время окончания рейсов
            ///
            /// - Remark: Generated from `#/components/schemas/Interval/end_time`.
            internal var end_time: Swift.String?
            /// Creates a new `Interval`.
            ///
            /// - Parameters:
            ///   - density: Периодичность рейсов
            ///   - begin_time: Время начала рейсов
            ///   - end_time: Время окончания рейсов
            internal init(
                density: Swift.String? = nil,
                begin_time: Swift.String? = nil,
                end_time: Swift.String? = nil
            ) {
                self.density = density
                self.begin_time = begin_time
                self.end_time = end_time
            }
            internal enum CodingKeys: String, CodingKey {
                case density
                case begin_time
                case end_time
            }
        }
        /// - Remark: Generated from `#/components/schemas/ThreadStationsResponse`.
        internal struct ThreadStationsResponse: Codable, Hashable, Sendable {
            /// Название нитки
            ///
            /// - Remark: Generated from `#/components/schemas/ThreadStationsResponse/title`.
            internal var title: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ThreadStationsResponse/uid`.
            internal var uid: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ThreadStationsResponse/from`.
            internal var from: Components.Schemas.Station?
            /// - Remark: Generated from `#/components/schemas/ThreadStationsResponse/to`.
            internal var to: Components.Schemas.Station?
            /// - Remark: Generated from `#/components/schemas/ThreadStationsResponse/transport_type`.
            internal var transport_type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ThreadStationsResponse/vehicle`.
            internal var vehicle: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ThreadStationsResponse/days`.
            internal var days: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ThreadStationsResponse/stops`.
            internal var stops: [Components.Schemas.Stop]?
            /// - Remark: Generated from `#/components/schemas/ThreadStationsResponse/interval`.
            internal var interval: Components.Schemas.Interval?
            /// Creates a new `ThreadStationsResponse`.
            ///
            /// - Parameters:
            ///   - title: Название нитки
            ///   - uid:
            ///   - from:
            ///   - to:
            ///   - transport_type:
            ///   - vehicle:
            ///   - days:
            ///   - stops:
            ///   - interval:
            internal init(
                title: Swift.String? = nil,
                uid: Swift.String? = nil,
                from: Components.Schemas.Station? = nil,
                to: Components.Schemas.Station? = nil,
                transport_type: Swift.String? = nil,
                vehicle: Swift.String? = nil,
                days: Swift.String? = nil,
                stops: [Components.Schemas.Stop]? = nil,
                interval: Components.Schemas.Interval? = nil
            ) {
                self.title = title
                self.uid = uid
                self.from = from
                self.to = to
                self.transport_type = transport_type
                self.vehicle = vehicle
                self.days = days
                self.stops = stops
                self.interval = interval
            }
            internal enum CodingKeys: String, CodingKey {
                case title
                case uid
                case from
                case to
                case transport_type
                case vehicle
                case days
                case stops
                case interval
            }
        }
        /// - Remark: Generated from `#/components/schemas/NearestCityResponse`.
        internal struct NearestCityResponse: Codable, Hashable, Sendable {
            /// Расстояние до найденного города (в километрах)
            ///
            /// - Remark: Generated from `#/components/schemas/NearestCityResponse/distance`.
            internal var distance: Swift.Double?
            /// Код города в системе кодирования Яндекс Расписаний
            ///
            /// - Remark: Generated from `#/components/schemas/NearestCityResponse/code`.
            internal var code: Swift.String?
            /// Название города
            ///
            /// - Remark: Generated from `#/components/schemas/NearestCityResponse/title`.
            internal var title: Swift.String?
            /// Общепринятое название города
            ///
            /// - Remark: Generated from `#/components/schemas/NearestCityResponse/popular_title`.
            internal var popular_title: Swift.String?
            /// Краткое название города
            ///
            /// - Remark: Generated from `#/components/schemas/NearestCityResponse/short_title`.
            internal var short_title: Swift.String?
            /// Широта города
            ///
            /// - Remark: Generated from `#/components/schemas/NearestCityResponse/lat`.
            internal var lat: Swift.Double?
            /// Долгота города
            ///
            /// - Remark: Generated from `#/components/schemas/NearestCityResponse/lng`.
            internal var lng: Swift.Double?
            /// Тип транспортного пункта (settlement или station)
            ///
            /// - Remark: Generated from `#/components/schemas/NearestCityResponse/type`.
            internal var _type: Swift.String?
            /// Creates a new `NearestCityResponse`.
            ///
            /// - Parameters:
            ///   - distance: Расстояние до найденного города (в километрах)
            ///   - code: Код города в системе кодирования Яндекс Расписаний
            ///   - title: Название города
            ///   - popular_title: Общепринятое название города
            ///   - short_title: Краткое название города
            ///   - lat: Широта города
            ///   - lng: Долгота города
            ///   - _type: Тип транспортного пункта (settlement или station)
            internal init(
                distance: Swift.Double? = nil,
                code: Swift.String? = nil,
                title: Swift.String? = nil,
                popular_title: Swift.String? = nil,
                short_title: Swift.String? = nil,
                lat: Swift.Double? = nil,
                lng: Swift.Double? = nil,
                _type: Swift.String? = nil
            ) {
                self.distance = distance
                self.code = code
                self.title = title
                self.popular_title = popular_title
                self.short_title = short_title
                self.lat = lat
                self.lng = lng
                self._type = _type
            }
            internal enum CodingKeys: String, CodingKey {
                case distance
                case code
                case title
                case popular_title
                case short_title
                case lat
                case lng
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/CarrierResponse`.
        internal struct CarrierResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CarrierResponse/carriers`.
            internal var carriers: [Components.Schemas.Carrier]?
            /// Creates a new `CarrierResponse`.
            ///
            /// - Parameters:
            ///   - carriers:
            internal init(carriers: [Components.Schemas.Carrier]? = nil) {
                self.carriers = carriers
            }
            internal enum CodingKeys: String, CodingKey {
                case carriers
            }
        }
        /// - Remark: Generated from `#/components/schemas/AllStationsResponse`.
        internal struct AllStationsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AllStationsResponse/countries`.
            internal var countries: [Components.Schemas.Country]?
            /// Creates a new `AllStationsResponse`.
            ///
            /// - Parameters:
            ///   - countries:
            internal init(countries: [Components.Schemas.Country]? = nil) {
                self.countries = countries
            }
            internal enum CodingKeys: String, CodingKey {
                case countries
            }
        }
        /// - Remark: Generated from `#/components/schemas/Country`.
        internal struct Country: Codable, Hashable, Sendable {
            /// Название страны
            ///
            /// - Remark: Generated from `#/components/schemas/Country/title`.
            internal var title: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Country/codes`.
            internal struct codesPayload: Codable, Hashable, Sendable {
                /// Код страны в системе Яндекс Расписаний
                ///
                /// - Remark: Generated from `#/components/schemas/Country/codes/yandex_code`.
                internal var yandex_code: Swift.String?
                /// Creates a new `codesPayload`.
                ///
                /// - Parameters:
                ///   - yandex_code: Код страны в системе Яндекс Расписаний
                internal init(yandex_code: Swift.String? = nil) {
                    self.yandex_code = yandex_code
                }
                internal enum CodingKeys: String, CodingKey {
                    case yandex_code
                }
            }
            /// - Remark: Generated from `#/components/schemas/Country/codes`.
            internal var codes: Components.Schemas.Country.codesPayload?
            /// - Remark: Generated from `#/components/schemas/Country/regions`.
            internal var regions: [Components.Schemas.Region]?
            /// Creates a new `Country`.
            ///
            /// - Parameters:
            ///   - title: Название страны
            ///   - codes:
            ///   - regions:
            internal init(
                title: Swift.String? = nil,
                codes: Components.Schemas.Country.codesPayload? = nil,
                regions: [Components.Schemas.Region]? = nil
            ) {
                self.title = title
                self.codes = codes
                self.regions = regions
            }
            internal enum CodingKeys: String, CodingKey {
                case title
                case codes
                case regions
            }
        }
        /// - Remark: Generated from `#/components/schemas/Region`.
        internal struct Region: Codable, Hashable, Sendable {
            /// Название региона
            ///
            /// - Remark: Generated from `#/components/schemas/Region/title`.
            internal var title: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Region/codes`.
            internal struct codesPayload: Codable, Hashable, Sendable {
                /// Код региона в системе Яндекс Расписаний
                ///
                /// - Remark: Generated from `#/components/schemas/Region/codes/yandex_code`.
                internal var yandex_code: Swift.String?
                /// Creates a new `codesPayload`.
                ///
                /// - Parameters:
                ///   - yandex_code: Код региона в системе Яндекс Расписаний
                internal init(yandex_code: Swift.String? = nil) {
                    self.yandex_code = yandex_code
                }
                internal enum CodingKeys: String, CodingKey {
                    case yandex_code
                }
            }
            /// - Remark: Generated from `#/components/schemas/Region/codes`.
            internal var codes: Components.Schemas.Region.codesPayload?
            /// - Remark: Generated from `#/components/schemas/Region/settlements`.
            internal var settlements: [Components.Schemas.Settlement]?
            /// Creates a new `Region`.
            ///
            /// - Parameters:
            ///   - title: Название региона
            ///   - codes:
            ///   - settlements:
            internal init(
                title: Swift.String? = nil,
                codes: Components.Schemas.Region.codesPayload? = nil,
                settlements: [Components.Schemas.Settlement]? = nil
            ) {
                self.title = title
                self.codes = codes
                self.settlements = settlements
            }
            internal enum CodingKeys: String, CodingKey {
                case title
                case codes
                case settlements
            }
        }
        /// - Remark: Generated from `#/components/schemas/Settlement`.
        internal struct Settlement: Codable, Hashable, Sendable {
            /// Название населенного пункта
            ///
            /// - Remark: Generated from `#/components/schemas/Settlement/title`.
            internal var title: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Settlement/codes`.
            internal struct codesPayload: Codable, Hashable, Sendable {
                /// Код населенного пункта в системе Яндекс Расписаний
                ///
                /// - Remark: Generated from `#/components/schemas/Settlement/codes/yandex_code`.
                internal var yandex_code: Swift.String?
                /// Creates a new `codesPayload`.
                ///
                /// - Parameters:
                ///   - yandex_code: Код населенного пункта в системе Яндекс Расписаний
                internal init(yandex_code: Swift.String? = nil) {
                    self.yandex_code = yandex_code
                }
                internal enum CodingKeys: String, CodingKey {
                    case yandex_code
                }
            }
            /// - Remark: Generated from `#/components/schemas/Settlement/codes`.
            internal var codes: Components.Schemas.Settlement.codesPayload?
            /// - Remark: Generated from `#/components/schemas/Settlement/stations`.
            internal var stations: [Components.Schemas.Station]?
            /// Creates a new `Settlement`.
            ///
            /// - Parameters:
            ///   - title: Название населенного пункта
            ///   - codes:
            ///   - stations:
            internal init(
                title: Swift.String? = nil,
                codes: Components.Schemas.Settlement.codesPayload? = nil,
                stations: [Components.Schemas.Station]? = nil
            ) {
                self.title = title
                self.codes = codes
                self.stations = stations
            }
            internal enum CodingKeys: String, CodingKey {
                case title
                case codes
                case stations
            }
        }
        /// - Remark: Generated from `#/components/schemas/Tickets`.
        internal struct Tickets: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Tickets/places`.
            internal var places: [Components.Schemas.Place]?
            /// Creates a new `Tickets`.
            ///
            /// - Parameters:
            ///   - places:
            internal init(places: [Components.Schemas.Place]? = nil) {
                self.places = places
            }
            internal enum CodingKeys: String, CodingKey {
                case places
            }
        }
        /// - Remark: Generated from `#/components/schemas/CopyrightInfo`.
        internal struct CopyrightInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CopyrightInfo/text`.
            internal var text: Swift.String?
            /// Creates a new `CopyrightInfo`.
            ///
            /// - Parameters:
            ///   - text:
            internal init(text: Swift.String? = nil) {
                self.text = text
            }
            internal enum CodingKeys: String, CodingKey {
                case text
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    internal enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    internal enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    internal enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    internal enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
internal enum Operations {
    /// Список ближайших станций
    ///
    /// - Remark: HTTP `GET /v3.0/nearest_stations/`.
    /// - Remark: Generated from `#/paths//v3.0/nearest_stations//get(getNearestStations)`.
    internal enum getNearestStations {
        internal static let id: Swift.String = "getNearestStations"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v3.0/nearest_stations/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// API key
                ///
                /// - Remark: Generated from `#/paths/v3.0/nearest_stations/GET/query/apikey`.
                internal var apikey: Swift.String
                /// Широта согласно WGS84
                ///
                /// - Remark: Generated from `#/paths/v3.0/nearest_stations/GET/query/lat`.
                internal var lat: Swift.Double
                /// Долгота согласно WGS84
                ///
                /// - Remark: Generated from `#/paths/v3.0/nearest_stations/GET/query/lng`.
                internal var lng: Swift.Double
                /// Радиус охвата в километрах
                ///
                /// - Remark: Generated from `#/paths/v3.0/nearest_stations/GET/query/distance`.
                internal var distance: Swift.Int
                /// Язык возвращаемой информации (например, ru_RU)
                ///
                /// - Remark: Generated from `#/paths/v3.0/nearest_stations/GET/query/lang`.
                internal var lang: Swift.String?
                /// Формат ответа (json или xml)
                ///
                /// - Remark: Generated from `#/paths/v3.0/nearest_stations/GET/query/format`.
                internal var format: Swift.String?
                /// Типы запрашиваемых станций (например, station, bus_station)
                ///
                /// - Remark: Generated from `#/paths/v3.0/nearest_stations/GET/query/station_types`.
                internal var station_types: Swift.String?
                /// Тип транспортного средства (например, plane, train, bus)
                ///
                /// - Remark: Generated from `#/paths/v3.0/nearest_stations/GET/query/transport_types`.
                internal var transport_types: Swift.String?
                /// Смещение относительно первого результата
                ///
                /// - Remark: Generated from `#/paths/v3.0/nearest_stations/GET/query/offset`.
                internal var offset: Swift.Int?
                /// Ограничение на количество возвращаемых станций
                ///
                /// - Remark: Generated from `#/paths/v3.0/nearest_stations/GET/query/limit`.
                internal var limit: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - apikey: API key
                ///   - lat: Широта согласно WGS84
                ///   - lng: Долгота согласно WGS84
                ///   - distance: Радиус охвата в километрах
                ///   - lang: Язык возвращаемой информации (например, ru_RU)
                ///   - format: Формат ответа (json или xml)
                ///   - station_types: Типы запрашиваемых станций (например, station, bus_station)
                ///   - transport_types: Тип транспортного средства (например, plane, train, bus)
                ///   - offset: Смещение относительно первого результата
                ///   - limit: Ограничение на количество возвращаемых станций
                internal init(
                    apikey: Swift.String,
                    lat: Swift.Double,
                    lng: Swift.Double,
                    distance: Swift.Int,
                    lang: Swift.String? = nil,
                    format: Swift.String? = nil,
                    station_types: Swift.String? = nil,
                    transport_types: Swift.String? = nil,
                    offset: Swift.Int? = nil,
                    limit: Swift.Int? = nil
                ) {
                    self.apikey = apikey
                    self.lat = lat
                    self.lng = lng
                    self.distance = distance
                    self.lang = lang
                    self.format = format
                    self.station_types = station_types
                    self.transport_types = transport_types
                    self.offset = offset
                    self.limit = limit
                }
            }
            internal var query: Operations.getNearestStations.Input.Query
            /// - Remark: Generated from `#/paths/v3.0/nearest_stations/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getNearestStations.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getNearestStations.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getNearestStations.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.getNearestStations.Input.Query,
                headers: Operations.getNearestStations.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v3.0/nearest_stations/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v3.0/nearest_stations/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Stations)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Stations {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getNearestStations.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getNearestStations.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Успешный ответ
            ///
            /// - Remark: Generated from `#/paths//v3.0/nearest_stations//get(getNearestStations)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getNearestStations.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getNearestStations.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Расписание рейсов между станциями
    ///
    /// - Remark: HTTP `GET /v3.0/search/`.
    /// - Remark: Generated from `#/paths//v3.0/search//get(getSchedualBetweenStations)`.
    internal enum getSchedualBetweenStations {
        internal static let id: Swift.String = "getSchedualBetweenStations"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v3.0/search/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// API key
                ///
                /// - Remark: Generated from `#/paths/v3.0/search/GET/query/apikey`.
                internal var apikey: Swift.String
                /// Код станции отправления
                ///
                /// - Remark: Generated from `#/paths/v3.0/search/GET/query/from`.
                internal var from: Swift.String
                /// Код станции прибытия
                ///
                /// - Remark: Generated from `#/paths/v3.0/search/GET/query/to`.
                internal var to: Swift.String
                /// Формат ответа, по умолчанию JSON
                ///
                /// - Remark: Generated from `#/paths/v3.0/search/GET/query/format`.
                internal var format: Swift.String?
                /// Язык ответа (например, ru_RU)
                ///
                /// - Remark: Generated from `#/paths/v3.0/search/GET/query/lang`.
                internal var lang: Swift.String?
                /// Дата в формате YYYY-MM-DD
                ///
                /// - Remark: Generated from `#/paths/v3.0/search/GET/query/date`.
                internal var date: Swift.String?
                /// Тип транспорта (plane, train, bus и т.д.)
                ///
                /// - Remark: Generated from `#/paths/v3.0/search/GET/query/transport_types`.
                internal var transport_types: Swift.String?
                /// Смещение результатов
                ///
                /// - Remark: Generated from `#/paths/v3.0/search/GET/query/offset`.
                internal var offset: Swift.Int?
                /// Лимит на количество результатов, по умолчанию 100
                ///
                /// - Remark: Generated from `#/paths/v3.0/search/GET/query/limit`.
                internal var limit: Swift.Int?
                /// Часовой пояс для дат и времени в ответе
                ///
                /// - Remark: Generated from `#/paths/v3.0/search/GET/query/result_timezone`.
                internal var result_timezone: Swift.String?
                /// Включить маршруты с пересадками (true/false)
                ///
                /// - Remark: Generated from `#/paths/v3.0/search/GET/query/transfers`.
                internal var transfers: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - apikey: API key
                ///   - from: Код станции отправления
                ///   - to: Код станции прибытия
                ///   - format: Формат ответа, по умолчанию JSON
                ///   - lang: Язык ответа (например, ru_RU)
                ///   - date: Дата в формате YYYY-MM-DD
                ///   - transport_types: Тип транспорта (plane, train, bus и т.д.)
                ///   - offset: Смещение результатов
                ///   - limit: Лимит на количество результатов, по умолчанию 100
                ///   - result_timezone: Часовой пояс для дат и времени в ответе
                ///   - transfers: Включить маршруты с пересадками (true/false)
                internal init(
                    apikey: Swift.String,
                    from: Swift.String,
                    to: Swift.String,
                    format: Swift.String? = nil,
                    lang: Swift.String? = nil,
                    date: Swift.String? = nil,
                    transport_types: Swift.String? = nil,
                    offset: Swift.Int? = nil,
                    limit: Swift.Int? = nil,
                    result_timezone: Swift.String? = nil,
                    transfers: Swift.Bool? = nil
                ) {
                    self.apikey = apikey
                    self.from = from
                    self.to = to
                    self.format = format
                    self.lang = lang
                    self.date = date
                    self.transport_types = transport_types
                    self.offset = offset
                    self.limit = limit
                    self.result_timezone = result_timezone
                    self.transfers = transfers
                }
            }
            internal var query: Operations.getSchedualBetweenStations.Input.Query
            /// - Remark: Generated from `#/paths/v3.0/search/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getSchedualBetweenStations.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getSchedualBetweenStations.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getSchedualBetweenStations.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.getSchedualBetweenStations.Input.Query,
                headers: Operations.getSchedualBetweenStations.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v3.0/search/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v3.0/search/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Segments)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Segments {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getSchedualBetweenStations.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getSchedualBetweenStations.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Успешный ответ
            ///
            /// - Remark: Generated from `#/paths//v3.0/search//get(getSchedualBetweenStations)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getSchedualBetweenStations.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getSchedualBetweenStations.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Список рейсов по станции
    ///
    /// - Remark: HTTP `GET /v3.0/schedule/`.
    /// - Remark: Generated from `#/paths//v3.0/schedule//get(getStationSchedule)`.
    internal enum getStationSchedule {
        internal static let id: Swift.String = "getStationSchedule"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v3.0/schedule/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// API key
                ///
                /// - Remark: Generated from `#/paths/v3.0/schedule/GET/query/apikey`.
                internal var apikey: Swift.String
                /// Код станции
                ///
                /// - Remark: Generated from `#/paths/v3.0/schedule/GET/query/station`.
                internal var station: Swift.String
                /// Язык возвращаемой информации (например, ru_RU)
                ///
                /// - Remark: Generated from `#/paths/v3.0/schedule/GET/query/lang`.
                internal var lang: Swift.String?
                /// Формат ответа (json по умолчанию)
                ///
                /// - Remark: Generated from `#/paths/v3.0/schedule/GET/query/format`.
                internal var format: Swift.String?
                /// Дата, на которую требуется расписание (формат YYYY-MM-DD)
                ///
                /// - Remark: Generated from `#/paths/v3.0/schedule/GET/query/date`.
                internal var date: Swift.String?
                /// Тип транспорта (plane, train, bus и т.д.)
                ///
                /// - Remark: Generated from `#/paths/v3.0/schedule/GET/query/transport_types`.
                internal var transport_types: Swift.String?
                /// Событие для фильтрации (arrival/отправление)
                ///
                /// - Remark: Generated from `#/paths/v3.0/schedule/GET/query/event`.
                internal var event: Swift.String?
                /// Направление (например, на Москву)
                ///
                /// - Remark: Generated from `#/paths/v3.0/schedule/GET/query/direction`.
                internal var direction: Swift.String?
                /// Система кодирования для параметра station
                ///
                /// - Remark: Generated from `#/paths/v3.0/schedule/GET/query/system`.
                internal var system: Swift.String?
                /// Часовой пояс для отображения времени
                ///
                /// - Remark: Generated from `#/paths/v3.0/schedule/GET/query/result_timezone`.
                internal var result_timezone: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - apikey: API key
                ///   - station: Код станции
                ///   - lang: Язык возвращаемой информации (например, ru_RU)
                ///   - format: Формат ответа (json по умолчанию)
                ///   - date: Дата, на которую требуется расписание (формат YYYY-MM-DD)
                ///   - transport_types: Тип транспорта (plane, train, bus и т.д.)
                ///   - event: Событие для фильтрации (arrival/отправление)
                ///   - direction: Направление (например, на Москву)
                ///   - system: Система кодирования для параметра station
                ///   - result_timezone: Часовой пояс для отображения времени
                internal init(
                    apikey: Swift.String,
                    station: Swift.String,
                    lang: Swift.String? = nil,
                    format: Swift.String? = nil,
                    date: Swift.String? = nil,
                    transport_types: Swift.String? = nil,
                    event: Swift.String? = nil,
                    direction: Swift.String? = nil,
                    system: Swift.String? = nil,
                    result_timezone: Swift.String? = nil
                ) {
                    self.apikey = apikey
                    self.station = station
                    self.lang = lang
                    self.format = format
                    self.date = date
                    self.transport_types = transport_types
                    self.event = event
                    self.direction = direction
                    self.system = system
                    self.result_timezone = result_timezone
                }
            }
            internal var query: Operations.getStationSchedule.Input.Query
            /// - Remark: Generated from `#/paths/v3.0/schedule/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getStationSchedule.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getStationSchedule.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getStationSchedule.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.getStationSchedule.Input.Query,
                headers: Operations.getStationSchedule.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v3.0/schedule/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v3.0/schedule/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ScheduleResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ScheduleResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getStationSchedule.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getStationSchedule.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Успешный ответ
            ///
            /// - Remark: Generated from `#/paths//v3.0/schedule//get(getStationSchedule)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getStationSchedule.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getStationSchedule.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Список станций следования
    ///
    /// - Remark: HTTP `GET /v3.0/thread/`.
    /// - Remark: Generated from `#/paths//v3.0/thread//get(getRouteStations)`.
    internal enum getRouteStations {
        internal static let id: Swift.String = "getRouteStations"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v3.0/thread/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// API key
                ///
                /// - Remark: Generated from `#/paths/v3.0/thread/GET/query/apikey`.
                internal var apikey: Swift.String
                /// Идентификатор нитки
                ///
                /// - Remark: Generated from `#/paths/v3.0/thread/GET/query/uid`.
                internal var uid: Swift.String
                /// Код станции отправления
                ///
                /// - Remark: Generated from `#/paths/v3.0/thread/GET/query/from`.
                internal var from: Swift.String?
                /// Код станции прибытия
                ///
                /// - Remark: Generated from `#/paths/v3.0/thread/GET/query/to`.
                internal var to: Swift.String?
                /// Формат ответа (json по умолчанию)
                ///
                /// - Remark: Generated from `#/paths/v3.0/thread/GET/query/format`.
                internal var format: Swift.String?
                /// Язык возвращаемой информации (например, ru_RU)
                ///
                /// - Remark: Generated from `#/paths/v3.0/thread/GET/query/lang`.
                internal var lang: Swift.String?
                /// Дата, на которую необходимо получить список станций (формат YYYY-MM-DD)
                ///
                /// - Remark: Generated from `#/paths/v3.0/thread/GET/query/date`.
                internal var date: Swift.String?
                /// Система кодирования для ответа (например, yandex, esr, all)
                ///
                /// - Remark: Generated from `#/paths/v3.0/thread/GET/query/show_systems`.
                internal var show_systems: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - apikey: API key
                ///   - uid: Идентификатор нитки
                ///   - from: Код станции отправления
                ///   - to: Код станции прибытия
                ///   - format: Формат ответа (json по умолчанию)
                ///   - lang: Язык возвращаемой информации (например, ru_RU)
                ///   - date: Дата, на которую необходимо получить список станций (формат YYYY-MM-DD)
                ///   - show_systems: Система кодирования для ответа (например, yandex, esr, all)
                internal init(
                    apikey: Swift.String,
                    uid: Swift.String,
                    from: Swift.String? = nil,
                    to: Swift.String? = nil,
                    format: Swift.String? = nil,
                    lang: Swift.String? = nil,
                    date: Swift.String? = nil,
                    show_systems: Swift.String? = nil
                ) {
                    self.apikey = apikey
                    self.uid = uid
                    self.from = from
                    self.to = to
                    self.format = format
                    self.lang = lang
                    self.date = date
                    self.show_systems = show_systems
                }
            }
            internal var query: Operations.getRouteStations.Input.Query
            /// - Remark: Generated from `#/paths/v3.0/thread/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getRouteStations.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getRouteStations.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getRouteStations.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.getRouteStations.Input.Query,
                headers: Operations.getRouteStations.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v3.0/thread/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v3.0/thread/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ThreadStationsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ThreadStationsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getRouteStations.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getRouteStations.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Успешный ответ
            ///
            /// - Remark: Generated from `#/paths//v3.0/thread//get(getRouteStations)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getRouteStations.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getRouteStations.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Ближайший город
    ///
    /// - Remark: HTTP `GET /v3.0/nearest_settlement/`.
    /// - Remark: Generated from `#/paths//v3.0/nearest_settlement//get(getNearestCity)`.
    internal enum getNearestCity {
        internal static let id: Swift.String = "getNearestCity"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v3.0/nearest_settlement/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// API key
                ///
                /// - Remark: Generated from `#/paths/v3.0/nearest_settlement/GET/query/apikey`.
                internal var apikey: Swift.String
                /// Широта согласно WGS84
                ///
                /// - Remark: Generated from `#/paths/v3.0/nearest_settlement/GET/query/lat`.
                internal var lat: Swift.Double
                /// Долгота согласно WGS84
                ///
                /// - Remark: Generated from `#/paths/v3.0/nearest_settlement/GET/query/lng`.
                internal var lng: Swift.Double
                /// Радиус поиска ближайшего города (в километрах)
                ///
                /// - Remark: Generated from `#/paths/v3.0/nearest_settlement/GET/query/distance`.
                internal var distance: Swift.Int?
                /// Язык возвращаемой информации (например, ru_RU)
                ///
                /// - Remark: Generated from `#/paths/v3.0/nearest_settlement/GET/query/lang`.
                internal var lang: Swift.String?
                /// Формат ответа (json по умолчанию)
                ///
                /// - Remark: Generated from `#/paths/v3.0/nearest_settlement/GET/query/format`.
                internal var format: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - apikey: API key
                ///   - lat: Широта согласно WGS84
                ///   - lng: Долгота согласно WGS84
                ///   - distance: Радиус поиска ближайшего города (в километрах)
                ///   - lang: Язык возвращаемой информации (например, ru_RU)
                ///   - format: Формат ответа (json по умолчанию)
                internal init(
                    apikey: Swift.String,
                    lat: Swift.Double,
                    lng: Swift.Double,
                    distance: Swift.Int? = nil,
                    lang: Swift.String? = nil,
                    format: Swift.String? = nil
                ) {
                    self.apikey = apikey
                    self.lat = lat
                    self.lng = lng
                    self.distance = distance
                    self.lang = lang
                    self.format = format
                }
            }
            internal var query: Operations.getNearestCity.Input.Query
            /// - Remark: Generated from `#/paths/v3.0/nearest_settlement/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getNearestCity.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getNearestCity.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getNearestCity.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.getNearestCity.Input.Query,
                headers: Operations.getNearestCity.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v3.0/nearest_settlement/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v3.0/nearest_settlement/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.NearestCityResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.NearestCityResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getNearestCity.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getNearestCity.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Успешный ответ
            ///
            /// - Remark: Generated from `#/paths//v3.0/nearest_settlement//get(getNearestCity)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getNearestCity.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getNearestCity.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Информация о перевозчике
    ///
    /// - Remark: HTTP `GET /v3.0/carrier/`.
    /// - Remark: Generated from `#/paths//v3.0/carrier//get(getCarrierInfo)`.
    internal enum getCarrierInfo {
        internal static let id: Swift.String = "getCarrierInfo"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v3.0/carrier/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// API key
                ///
                /// - Remark: Generated from `#/paths/v3.0/carrier/GET/query/apikey`.
                internal var apikey: Swift.String
                /// Код перевозчика
                ///
                /// - Remark: Generated from `#/paths/v3.0/carrier/GET/query/code`.
                internal var code: Swift.String
                /// Система кодирования (yandex, iata, sirena, express, esr)
                ///
                /// - Remark: Generated from `#/paths/v3.0/carrier/GET/query/system`.
                internal var system: Swift.String?
                /// Язык возвращаемой информации (например, ru_RU)
                ///
                /// - Remark: Generated from `#/paths/v3.0/carrier/GET/query/lang`.
                internal var lang: Swift.String?
                /// Формат ответа (json по умолчанию)
                ///
                /// - Remark: Generated from `#/paths/v3.0/carrier/GET/query/format`.
                internal var format: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - apikey: API key
                ///   - code: Код перевозчика
                ///   - system: Система кодирования (yandex, iata, sirena, express, esr)
                ///   - lang: Язык возвращаемой информации (например, ru_RU)
                ///   - format: Формат ответа (json по умолчанию)
                internal init(
                    apikey: Swift.String,
                    code: Swift.String,
                    system: Swift.String? = nil,
                    lang: Swift.String? = nil,
                    format: Swift.String? = nil
                ) {
                    self.apikey = apikey
                    self.code = code
                    self.system = system
                    self.lang = lang
                    self.format = format
                }
            }
            internal var query: Operations.getCarrierInfo.Input.Query
            /// - Remark: Generated from `#/paths/v3.0/carrier/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getCarrierInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getCarrierInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getCarrierInfo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.getCarrierInfo.Input.Query,
                headers: Operations.getCarrierInfo.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v3.0/carrier/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v3.0/carrier/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.CarrierResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.CarrierResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getCarrierInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getCarrierInfo.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Успешный ответ
            ///
            /// - Remark: Generated from `#/paths//v3.0/carrier//get(getCarrierInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getCarrierInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getCarrierInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Список всех доступных станций
    ///
    /// - Remark: HTTP `GET /v3.0/stations_list/`.
    /// - Remark: Generated from `#/paths//v3.0/stations_list//get(getAllStations)`.
    internal enum getAllStations {
        internal static let id: Swift.String = "getAllStations"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v3.0/stations_list/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// API key
                ///
                /// - Remark: Generated from `#/paths/v3.0/stations_list/GET/query/apikey`.
                internal var apikey: Swift.String
                /// Язык возвращаемой информации (например, ru_RU)
                ///
                /// - Remark: Generated from `#/paths/v3.0/stations_list/GET/query/lang`.
                internal var lang: Swift.String?
                /// Формат ответа (json по умолчанию)
                ///
                /// - Remark: Generated from `#/paths/v3.0/stations_list/GET/query/format`.
                internal var format: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - apikey: API key
                ///   - lang: Язык возвращаемой информации (например, ru_RU)
                ///   - format: Формат ответа (json по умолчанию)
                internal init(
                    apikey: Swift.String,
                    lang: Swift.String? = nil,
                    format: Swift.String? = nil
                ) {
                    self.apikey = apikey
                    self.lang = lang
                    self.format = format
                }
            }
            internal var query: Operations.getAllStations.Input.Query
            /// - Remark: Generated from `#/paths/v3.0/stations_list/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAllStations.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAllStations.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getAllStations.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.getAllStations.Input.Query,
                headers: Operations.getAllStations.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v3.0/stations_list/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v3.0/stations_list/GET/responses/200/content/text\/html`.
                    case html(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.html`.
                    ///
                    /// - Throws: An error if `self` is not `.html`.
                    /// - SeeAlso: `.html`.
                    internal var html: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .html(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getAllStations.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getAllStations.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Успешный ответ
            ///
            /// - Remark: Generated from `#/paths//v3.0/stations_list//get(getAllStations)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAllStations.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getAllStations.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case html
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "text/html":
                    self = .html
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .html:
                    return "text/html"
                }
            }
            internal static var allCases: [Self] {
                [
                    .html
                ]
            }
        }
    }
    /// Информация об авторских правах
    ///
    /// - Remark: HTTP `GET /v3.0/copyright/`.
    /// - Remark: Generated from `#/paths//v3.0/copyright//get(getCopyright)`.
    internal enum getCopyright {
        internal static let id: Swift.String = "getCopyright"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v3.0/copyright/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// API key
                ///
                /// - Remark: Generated from `#/paths/v3.0/copyright/GET/query/apikey`.
                internal var apikey: Swift.String
                /// Формат ответа (json по умолчанию)
                ///
                /// - Remark: Generated from `#/paths/v3.0/copyright/GET/query/format`.
                internal var format: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - apikey: API key
                ///   - format: Формат ответа (json по умолчанию)
                internal init(
                    apikey: Swift.String,
                    format: Swift.String? = nil
                ) {
                    self.apikey = apikey
                    self.format = format
                }
            }
            internal var query: Operations.getCopyright.Input.Query
            /// - Remark: Generated from `#/paths/v3.0/copyright/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getCopyright.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getCopyright.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getCopyright.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.getCopyright.Input.Query,
                headers: Operations.getCopyright.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v3.0/copyright/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v3.0/copyright/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.CopyrightInfo)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.CopyrightInfo {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getCopyright.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getCopyright.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Успешный ответ
            ///
            /// - Remark: Generated from `#/paths//v3.0/copyright//get(getCopyright)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getCopyright.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getCopyright.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
